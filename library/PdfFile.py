

class PdfHeaderData:
    #
    def __init__(self):
        self.i1_out_start = -1
        self.i1_out_end = -1
        self.b1_marker = b''
        self.b2_tag = b''
        self.b3_split = b''
        self.b4_marker = b''
        self.b5_tag = b''
        self.b6_split = b''

class PdfTagData:
    #
    def __init__(self, tag:str, count:int ):
        self.tag = tag
        self.count = count


class PdfFile:
    #
    def __init__(self, file:bytes):
        self.i1_file  = file
        self.i2_pdfheader = PdfHeaderData()
        self.i3_obj_count = 0
        self.i4_endobj_count = 0
        self.i5_stream_count = 0
        self.i6_endstream_count = 0
        self.i7_xref_count = 0
        self.i8_trailer_count = 0
        self.i9_startxref_count = 0
        self.i10_eof_count = 0
        #
        self.__func1__header()
        self.__func2_other()

    # Karakter kontrol
    def __checkByte(self, char:bytes ) -> bool:
        if char == b'\r' or char == b'\n' or char == b'\x20' :
            return  True
        else:
            return  False

    def __func1__header(self):
        self.i2_pdfheader.i1_out_start = 0
        self.i2_pdfheader.b1_marker = b'%'
        self.i2_pdfheader.b2_tag = self.i1_file [1:8]
        #
        checkheader = self.i1_file[0:30]
        tmp_percent = checkheader[1:].find(b'%')
        #
        if tmp_percent > -1:
            second_percent = tmp_percent + 1
            ii_end = second_percent + 5
            self.i2_pdfheader.b5_tag = self.i1_file[second_percent + 1:ii_end]
            self.i2_pdfheader.b4_marker = b'%'
            self.i2_pdfheader.b3_split = self.i1_file[8:second_percent]
            for jj in range(ii_end, ii_end + 4):
                if self.__checkByte(char=self.i1_file[jj:jj + 1]):
                    continue
                else:
                    self.i2_pdfheader.i1_out_end = jj
                    break
            self.i2_pdfheader.b6_split = self.i1_file[ii_end:self.i2_pdfheader.i1_out_end]
        else:
            self.i2_pdfheader.b4_marker = b''
            self.i2_pdfheader.b5_tag = b''
            self.i2_pdfheader.b6_split = b''
            ii_end = 8
            for jj in range(ii_end, ii_end + 4):
                if self.__checkByte(char=self.i2_pdfheader[jj:jj + 1]):
                    continue
                else:
                    self.i2_pdfheader.i1_out_end = jj
                    break
            self.i2_pdfheader.b3_split = self.i1_file[ii_end:self.i2_pdfheader.i1_out_end]
            #

    def __func2_other(self):
        self.i4_endobj_count = self.i1_file.count(b'endobj')
        self.i3_obj_count = (self.i1_file.count(b'obj')) - self.i4_endobj_count
        self.i6_endstream_count = self.i1_file.count(b'endstream')
        self.i5_stream_count = (self.i1_file.count(b'stream')) - self.i6_endstream_count
        self.i8_trailer_count = self.i1_file.count(b'trailer')
        self.i9_startxref_count = self.i1_file.count(b'startxref')
        self.i7_xref_count = (self.i1_file.count(b'xref')) - self.i9_startxref_count
        self.i10_eof_count = self.i1_file.count(b'%%EOF')
        #

    def checkPdfTags(self, tags:list):
        result = []
        for tag in tags:
            tag_bytes = tag.encode(encoding='utf-8')
            tag_count = self.i1_file.count( tag_bytes )
            if tag_count != 0:
                result.append( PdfTagData(tag=tag, count=tag_count) )
        if len(result) == 0:
            return False, result
        else:
            return True, result
