#
import subprocess
#
class CheckAdsData:
    #
    def __init__(self, path:str=''):
        self.filename_fullpath = path
        self.filename_onlyname = ''
        self.ads_check_otherdata  = False
        self.ads_otherdata_names  = []
        self.ads_check_zoneidentifier = False
        self.ads_zoneidentifier_data = ''
        #
        self.__start()
        #

    def __start(self):
        self.__func1_onlyname()
        self.__func2_ads()
        self.__func3_zoneidentifier()
        #

    def __func1_onlyname(self):
        #
        script = 'cmd /u /c dir "{}"'.format(self.filename_fullpath)
        cmd_connect = subprocess.Popen(script, stdout=subprocess.PIPE)
        cmd_bytes = cmd_connect.communicate()
        cmd_string = cmd_bytes[0].decode('u16')
        #
        if cmd_string is not None:
            if isinstance(cmd_string, str):
                cmd_string_split = cmd_string.split(sep="\r\n")
                if len(cmd_string_split) == 9:
                    check_file_path = cmd_string_split[3].find('Directory of')
                    if check_file_path != -1 and (len(cmd_string_split[3]) > 14):
                        check_file_name = cmd_string_split[5].find('<DIR>')
                        if check_file_name == -1 and (len(cmd_string_split[5]) > 36):
                            self.filename_onlyname = (cmd_string_split[5])[36:]
        #

    def __func2_ads(self):
        #
        script = 'cmd /u /c dir /r "{}"'.format(self.filename_fullpath)
        cmd_connect = subprocess.Popen(script, stdout=subprocess.PIPE)
        cmd_bytes = cmd_connect.communicate()
        cmd_string = cmd_bytes[0].decode('u16')
        #
        if cmd_string is not None:
            if isinstance(cmd_string, str):
                cmd_string_split = cmd_string.split(sep="\r\n")
                for line in cmd_string_split:
                    check = line.find(':$DATA')
                    if check != -1 and (len(line)>36) :
                        tmp1 = line[36:].split(':')
                        if len(tmp1) == 3:
                            if tmp1[1] == 'Zone.Identifier':
                                self.ads_check_zoneidentifier = True
                            else:
                                self.ads_check_otherdata = True
                                self.ads_otherdata_names.append(tmp1[1])
        #
    def __func3_zoneidentifier(self):

        if self.ads_check_zoneidentifier:
            #
            file_zoneidentifier = self.filename_fullpath + ":Zone.Identifier"
            file_bytes = None
            file_str = ''
            encoding_format = 'utf-8'
            #
            with open(file=file_zoneidentifier, mode='rb') as file:
                file_bytes = file.read()
                if file_bytes != None:
                    file_str = file_bytes.decode(encoding=encoding_format, errors='replace')
                    self.ads_zoneidentifier_data = file_str.replace('\r\n','\n')
                    self.ads_zoneidentifier_data = self.ads_zoneidentifier_data.replace('\t','')
                    self.ads_zoneidentifier_data = self.ads_zoneidentifier_data.replace('\n\n', '\n')